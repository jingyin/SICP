#lang racket

(provide deriv)
;(require "algexp.rkt")
;(require "algexp2.rkt")
;(require "algexp3.rkt")
;(require "alginfix.rkt")
(require "alginfix2.rkt")

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))))
        ((exponentiation? exp)
         (make-product (exponent exp)
                       (make-product (deriv (base exp) var)
                                     (make-exponentiation (base exp) (- (exponent exp) 1)))))
        (else (error "unknown expression type - DERIV" exp))))

;(deriv '(+ x 3) 'x)
(deriv '(x + 3) 'x)
;(deriv '(* x y) 'x)
(deriv '(x * y) 'x)
;(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(x * y * (x + 3)) 'x)
;(deriv '(** x 4) 'x)
(deriv '(x ** 4) 'x)
;(deriv '(* x y (+ x 3)) 'x)
(deriv '(x * y * (x + y + 3)) 'x)
