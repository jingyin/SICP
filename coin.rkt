#lang racket

(define (count-change amount)
  (define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else (+ (cc amount
                       (- kinds-of-coins 1))
                   (cc (- amount (first-denomination kinds-of-coins))
                       kinds-of-coins)))))
  (define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
          ((= kinds-of-coins 2) 5)
          ((= kinds-of-coins 3) 10)
          ((= kinds-of-coins 4) 25)
          ((= kinds-of-coins 5) 50)))
  (cc amount 5))

(define (f n)
  (define (f-rec n)
    (cond ((< n 3) n)
          (else (+ (f-rec (- n 1))
                   (* 2 (f-rec (- n 2)))
                   (* 3 (f-rec (- n 3)))))))
  (define (f-it n)
    (if (< n 3)
        n
        (f-iter 0 1 2 2 n)))
  ; c = f(counter)
  ; b = f(counter - 1)
  ; a = f(counter - 2)
  (define (f-iter a b c counter n)
    (if (= counter n)
        c
        (f-iter b c (+ c
                       (* 2 b)
                       (* 3 a))
                    (+ 1 counter) n)))
  (f-it n))
  ;(f-rec n))

(define (choose n k)
  (cond ((= k 0) 1)
        ((= n 0) 0)
        (else (+ (choose (- n 1) (- k 1))
                 (choose (- n 1) k)))))

(count-change 10)
(count-change 100)

(f 3)
(f 4)
(f 5)
(f 6)
(f 7)
(f 8)
(f 9)

(choose 5 0)
(choose 5 1)
(choose 5 2)
(choose 5 3)
(choose 5 4)
(choose 5 5)
