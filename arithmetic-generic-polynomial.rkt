#lang racket

(provide add sub mul div)

(require "getput.rkt")
(require "generic-drop.rkt")
(require "tagged-obj-original.rkt")
(require "list-util.rkt")
(require "accumulate.rkt")
(require racket/trace)

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))
(define (equ? x y) (apply-generic 'equ? x y))
(define (=zero? x) (apply-generic '=zero? x))
(define (exp x y) (apply-generic 'exp x y))
(define (raise x) (apply-generic 'raise x))
(define (project x) (apply-generic 'project x))
(define (sine x) (apply-generic 'sine x))
(define (cosine x) (apply-generic 'cosine x))
(define (square-root x) (apply-generic 'square-root x))
(define (square x) (apply-generic 'square x))
(define (atangent x y) (apply-generic 'atangent x y))
(define (negate x) (apply-generic 'negate x))

(define (install-scheme-number-package)
  (define (tag x) (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number)
       (lambda (x y) (= x y)))
  (put 'exp '(scheme-number scheme-number)
       (lambda (x y) (tag (expt x y))))
  (put '=zero? '(scheme-number) (lambda (x) (= x 0)))
  (put 'make 'scheme-number (lambda (x) (tag x)))
  (put 'raise '(scheme-number) (lambda (x) (make-rational x 1)))
  (put 'project '(scheme-number) (lambda (x) #f))
  (put 'sine '(scheme-number) (compose make-real sin))
  (put 'cosine '(scheme-number) (compose make-real cos))
  (put 'square-root '(scheme-number) (compose make-real sqrt))
  (put 'square '(scheme-number) (lambda (x) (make-scheme-number (* x x))))
  (put 'atangent '(scheme-number scheme-number) (lambda (x y) (make-real (atan x y))))
  (put 'negate '(scheme-number) (lambda (x) (tag (- 0 x))))
  'done)

(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))

(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y)) (* (denom x) (numer y))))
  (define (equ? x y)
    (= (* (numer x) (denom y))
       (* (numer y) (denom x))))
  (define (=zero? x) (= (numer x) 0))
  (define (tag x) (attach-tag 'rational x))
  (put 'add '(rational rational)
       (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
       (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
       (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
       (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational) equ?)
  (put '=zero? '(rational) =zero?)
  (put 'make 'rational
       (lambda (n d) (tag (make-rat n d))))
  (put 'raise '(rational) (lambda (r) (make-real (exact->inexact (/ (numer r) (denom r))))))
  (put 'project '(rational) (lambda (r) (make-scheme-number (floor (/ (numer r) (denom r))))))
  (put 'sine '(rational) (lambda (r) (make-real (sin (/ (numer r) (denom r))))))
  (put 'cosine '(rational) (lambda (r) (make-real (cos (/ (numer r) (denom r))))))
  (put 'square '(rational) (lambda (r) (make-real (* (/ (numer r) (denom r))
                                                     (/ (numer r) (denom r))))))
  (put 'square-root '(rational) (lambda (r) (make-real (sqrt (/ (numer r) (denom r))))))
  (put 'atangent '(rational rational) (lambda (r s) (make-real (atan (/ (numer r) (denom r))
                                                                     (/ (numer s) (denom s))))))
  (put 'negate '(rational) (lambda (r) (make-rational (- 0 (numer r)) (denom r))))
  'done)

(define (make-rational n d)
  ((get 'make 'rational) n d))

(define (install-real-package)
  (define (tag x) (attach-tag 'real x))
  (put 'add '(real real) (lambda (x y) (tag (+ x y))))
  (put 'sub '(real real) (lambda (x y) (tag (- x y))))
  (put 'mul '(real real) (lambda (x y) (tag (* x y))))
  (put 'div '(real real) (lambda (x y) (tag (/ x y))))
  (put 'equ? '(real real) (lambda (x y) (= x y)))
  (put '=zero? '(real) (lambda (x) (= x 0.0)))
  (put 'make 'real (lambda (r) (tag r)))
  (put 'raise '(real) (lambda (r) (make-complex-from-real-imag (tag r) (tag 0.0))))
  (put 'project '(real) (lambda (r)
                          (let ((q (inexact->exact r)))
                            (make-rational (numerator q) (denominator q)))))
  (put 'sine '(real) (lambda (r) (compose tag sin)))
  (put 'cosine '(real) (lambda (r) (compose make-real cos)))
  (put 'square-root '(real) (compose tag sqrt))
  (put 'square '(real) (lambda (x) (tag (* x x))))
  (put 'atangent '(real real) (lambda (x y) (tag (atan x y))))
  (put 'negate '(real) (lambda (r) (tag (- 0 r))))
  'done)

(define (make-real r)
  ((get 'make 'real) r))

(define (install-complex-package)
  (define (install-rect-package)
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (make-from-real-imag x y) (cons x y))
    (define (magnitude z)
      (square-root (add (square (real-part z))
                        (square (imag-part z)))))
    (define (angle z)
      (atangent (imag-part z) (real-part z)))
    (define (make-from-mag-ang r a)
      (cons (mul r (cosine a)) (mul r (sine a))))
    (define (=zero? x) (and (equ? (make-scheme-number 0) (real-part x))
                            (equ? (make-scheme-number 0) (imag-part x))))

    (define (tag x) (attach-tag 'rect x))
    (put 'real-part '(rect) real-part)
    (put 'imag-part '(rect) imag-part)
    (put 'magnitude '(rect) magnitude)
    (put 'angle '(rect) angle)
    (put 'make-from-real-imag 'rect (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'rect (lambda (r a) (tag (make-from-mag-ang r a))))
    (put '=zero? '(rect) =zero?)
    (put 'negate '(rect) (lambda (r) (tag (make-from-real-imag (negate (real-part r)) (negate (imag-part r))))))
    'done)

  (define (install-polar-package)
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z) (mul (magnitude z) (sine (angle z))))
    (define (imag-part z) (mul (magnitude z) (cosine (angle z))))
    (define (make-from-real-imag x y)
      (cons (square-root (add (square x) (square y)))
            (atangent y x)))
    (define (=zero? x) (equ? (make-scheme-number 0) (magnitude x)))

    (define (tag x) (attach-tag 'polar x))
    (put 'real-part '(polar) real-part)
    (put 'imag-part '(polar) imag-part)
    (put 'magnitude '(polar) magnitude)
    (put 'angle '(polar) angle)
    (put 'make-from-real-imag 'polar (lambda (x y) (tag (make-from-real-imag x y))))
    (put 'make-from-mag-ang 'polar (lambda (r a) (tag (make-from-mag-ang r a))))
    (put '=zero? '(polar) =zero?)
    (put 'negate '(polar) (lambda (r) (tag (make-from-real-imag (negate (real-part r)) (negate (imag-part r))))))
    'done)

  (install-rect-package)
  (install-polar-package)

  (define (real-part z) (apply-generic 'real-part z))
  (define (imag-part z) (apply-generic 'imag-part z))
  (define (magnitude z) (apply-generic 'magnitude z))
  (define (angle z) (apply-generic 'angle z))
  (define (complex-equ? x y) (and (equ? (real-part x) (real-part y))
                          (equ? (imag-part x) (imag-part y))))
  (define (=zero? x) (apply-generic '=zero? x))
  (define (negate x) (apply-generic 'negate x))

  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rect) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))

  (define (add-complex z1 z2)
    (make-from-real-imag (add (real-part z1) (real-part z2))
                         (add (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (sub (real-part z1) (real-part z2))
                         (sub (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (mul (magnitude z1) (magnitude z2))
                       (add (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (div (magnitude z1) (magnitude z2))
                       (sub (angle z1) (angle z2))))

  (define (tag z) (attach-tag 'complex z))
  (put 'add '(complex complex) (compose tag add-complex))
  (put 'sub '(complex complex) (compose tag sub-complex))
  (put 'mul '(complex complex) (compose tag mul-complex))
  (put 'div '(complex complex) (compose tag div-complex))
  (put 'make-from-real-imag 'complex (compose tag make-from-real-imag))
  (put 'make-from-mag-ang 'complex (compose tag make-from-mag-ang))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put 'equ? '(complex complex) complex-equ?)
  (put '=zero? '(complex) =zero?)
  (put 'raise '(complex) (lambda (c) #f))
  (put 'project '(complex) (lambda (c) (real-part c)))
  (put 'negate '(complex) negate)
  'done)

(define (make-complex-from-real-imag x y)
  ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-from-mag-ang 'complex) r a))
(define (real-part z) (apply-generic 'real-part z))
(define (imag-part z) (apply-generic 'imag-part z))
(define (magnitude z) (apply-generic 'magnitude z))
(define (angle z) (apply-generic 'angle z))

; two representations for polynomial
; sparse -- only contains terms with non-zero coefficients
; 'polynomial . 'x . 'sparse
; dense -- contains non-zero highest order terms followed by all lower-order terms
; when a polynomial is dense, we don't have to keep the order (it'd be implicit)
; 'polynomial . 'x . 'dense
; generalize on the term list
; when determining which representation to pick, we compute
(define (install-polynomial-package)
  ; common routine to both representations
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (variable? x) (symbol? x))
  (define (same-variable? x y)
    (and (variable? x) (variable? y) (eq? x y)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  (define (tag p) (attach-tag 'polynomial p))

  (define (install-sparse-package)
    (define (tag p) (attach-tag 'sparse p))
    (define (adjoin-term term term-list)
      (if (=zero? (coeff term))
          term-list
          (cons term term-list)))
    (define (add-terms L1 L2)
      (cond ((empty-termlist? L1) L2)
            ((empty-termlist? L2) L1)
            (else
             (let ((t1 (first-term L1)) (t2 (first-term L2)))
               (cond ((> (order t1) (order t2))
                      (adjoin-term
                       t1 (add-terms (rest-terms L1) L2)))
                     ((< (order t1) (order t2))
                      (adjoin-term
                       t2 (add-terms L1 (rest-terms L2))))
                     (else
                      (adjoin-term
                       (make-term (order t1)
                                  (add (coeff t1) (coeff t2)))
                       (add-terms (rest-terms L1)
                                  (rest-terms L2)))))))))
    (define (sub-terms L1 L2)
      (add-terms L1 (negate-terms L2)))
    (define (mul-terms L1 L2)
      (if (empty-termlist? L1)
          (the-empty-termlist)
          (add-terms (mul-term-by-all-terms (first-term L1) L2)
                     (mul-terms (rest-terms L1) L2))))
    (define (mul-term-by-all-terms t1 L)
      (if (empty-termlist? L)
          (the-empty-termlist)
          (let ((t2 (first-term L)))
            (adjoin-term
             (make-term (+ (order t1) (order t2))
                        (mul (coeff t1) (coeff t2)))
             (mul-term-by-all-terms t1 (rest-terms L))))))
    (define (div-terms L1 L2)
      (if (empty-termlist? L1)
          (list '() '())
          (let ((t1 (first-term L1))
                (t2 (first-term L2)))
            (if (> (order t2) (order t1))
                (list '() L1)
                (let ((new-c (div (coeff t1) (coeff t2)))
                      (new-o (- (order t1) (order t2))))
                  (let ((rest-of-result
                         (div-terms (sub-terms L1
                                               (mul-terms (list (make-term new-o new-c))
                                                          L2))
                                    L2)))
                    (list (add-terms (list (make-term new-o new-c)) (car rest-of-result))
                          (cadr rest-of-result))))))))
    (define (negate-terms L)
      (map (lambda (t)
            (make-term (order t) (negate (coeff t)))) L))
    (put 'add '(sparse sparse) (compose tag add-terms))
    (put 'sub '(sparse sparse) (compose tag sub-terms))
    (put 'mul '(sparse sparse) (compose tag mul-terms))
    (put 'div '(sparse sparse) (compose tag div-terms))
    (put 'negate '(sparse) (compose tag negate-terms))
    (put '=zero? '(sparse) empty-termlist?)
    (put 'raise '(sparse) #f)
    (put 'make 'sparse (compose tag (lambda (terms) terms)))
    'done)

  (define (make-sparse-terms terms)
    ((get 'make 'sparse) terms))

  (define (install-dense-package)
    (define (tag t) (attach-tag 'dense t))
    (define zero-terms (list (make-scheme-number 0)))
    (define (compact-terms terms)
      (if (null? terms)
          zero-terms
          (if (=zero? (car terms))
              (compact-terms (cdr terms))
              terms)))
    (define (add-terms L1 L2)
      (define (add-terms-rec L1 len1 L2 len2)
        (cond ((= len1 len2) (if (= len1 1)
                                 (list (add (car L1)
                                            (car L2)))
                                 (cons (add (car L1)
                                            (car L2))
                                       (add-terms-rec (cdr L1)
                                                      (- len1 1)
                                                      (cdr L2)
                                                      (- len2 1)))))
              ((< len1 len2) (cons (car L2)
                                   (add-terms-rec L1 len1
                                                  (cdr L2)
                                                  (- len2 1))))
              (else (cons (car L1)
                          (add-terms-rec (cdr L1)
                                         (- len1 1)
                                         L2 len2)))))
      (let ((len1 (length L1))
            (len2 (length L2)))
        (compact-terms (add-terms-rec L1 len1 L2 len2))))
    (define (sub-terms L1 L2)
      (add-terms L1 (negate-terms L2)))
    (define (terms=zero? terms)
      (and (=zero? (car terms))
           (null? (cdr terms))))
    (define (mul-terms L1 L2)
      (define (pad-zero l n) (append l (generate (make-scheme-number 0) n)))
      (define (op t rest)
        (let ((item (car t))
              (index (cadr t)))
          (add-terms (compact-terms rest)
                     (map (lambda (x) (mul x item)) (pad-zero L1 index)))))
      (cond ((terms=zero? L1) zero-terms)
            ((terms=zero? L2) zero-terms)
            (else (compact-terms (accumulate op '()
                                             (zip (reverse L2) (enumerate-interval 0 (- (length L2) 1))))))))
    (define (negate-terms L) (map negate L))
    (define (dense->sparse terms)
      (filter (lambda (term) (not (=zero? (coeff term))))
              (zip (reverse (enumerate-interval 0 (- (length terms) 1)))
                   terms)))
    (put 'add '(dense dense) (compose tag add-terms))
    (put 'sub '(dense dense) (compose tag sub-terms))
    (put 'mul '(dense dense) (compose tag mul-terms))
    (put 'negate '(dense) (compose tag negate-terms))
    (put '=zero? '(dense) terms=zero?)
    (put 'raise '(dense) (compose make-sparse-terms dense->sparse))
    (put 'make 'dense (compose tag (lambda (terms) terms)))
    'done)

  (install-sparse-package)
  (install-dense-package)

  (define (make-dense-terms terms)
    ((get 'make 'dense) terms))

  (define (add-terms L1 L2) (apply-generic 'add L1 L2))
  (define (sub-terms L1 L2) (apply-generic 'sub L1 L2))
  (define (mul-terms L1 L2) (apply-generic 'mul L1 L2))
  (define (div-terms L1 L2) (apply-generic 'div L1 L2))
  (define (negate-terms L) (apply-generic 'negate L))
  (define (terms=zero? L) (apply-generic '=zero? L))

  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (error "Non-identical variable -- ADD-POLY")))
  (define (sub-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (sub-terms (term-list p1)
                              (term-list p2)))
        (error "Non-identical variable -- SUB-POLY")))
  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (error "Non-identical variable -- MUL-POLY")))
  (define (div-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (div-terms (term-list p1)
                              (term-list p2)))
        (error "Non-identical variable -- DIV-POLY")))
  (define (negate-poly p)
    (make-poly (variable p) (negate-terms (term-list p))))
  (define (poly=zero? p)
    (terms=zero? (term-list p)))

  (put 'add '(polynomial polynomial) (compose tag add-poly))
  (put 'sub '(polynomial polynomial) (compose tag sub-poly))
  (put 'mul '(polynomial polynomial) (compose tag mul-poly))
  (put 'div '(polynomial polynomial) (compose tag div-poly))
  (put 'negate '(polynomial) (compose tag negate-poly))
  (put '=zero? '(polynomial) (compose poly=zero?))
  (put 'make-from-sparse 'polynomial (lambda (var terms) (tag (make-poly var (make-sparse-terms terms)))))
  (put 'make-from-dense 'polynomial (lambda (var terms) (tag (make-poly var (make-dense-terms terms)))))
  'done)

(define (make-polynomial-sparse var terms)
  ((get 'make-from-sparse 'polynomial) var terms))

(define (make-polynomial-dense var terms)
  ((get 'make-from-dense 'polynomial) var terms))

(for-each (lambda (x) (x)) (list install-scheme-number-package install-rational-package install-real-package install-complex-package install-polynomial-package))

(define complex-rect (make-complex-from-real-imag (make-scheme-number 3) (make-scheme-number 4)))
(define complex-polar (make-complex-from-mag-ang (make-real 4) (make-rational 0 1)))
(magnitude complex-rect)
(magnitude complex-polar)
(angle complex-rect)
(real-part complex-polar)
(add (make-scheme-number 4) (make-scheme-number 5))
(equ? (make-scheme-number 4) (make-scheme-number 4))
(sub complex-rect (make-complex-from-real-imag (make-scheme-number 4) (make-real 5)))
(equ? (make-rational 3 4) (make-rational 6 8))
(equ? complex-rect complex-rect)
(equ? complex-rect complex-polar)
(=zero? (make-scheme-number 4))
(=zero? (make-scheme-number 0))
(=zero? (make-rational 0 4))
(=zero? (make-rational 1 4))
(=zero? complex-rect)
(=zero? complex-polar)
(=zero? (make-complex-from-real-imag (make-rational 0 1) (make-scheme-number 0)))
(exp (make-scheme-number 4) (make-scheme-number 5))

(define tr (make-scheme-number 4))
(raise tr)
(raise (raise tr))
(raise (raise (raise tr)))
(raise (raise (raise (raise tr))))

((get 'raise (list (type-tag (make-scheme-number 3)))) (contents (make-scheme-number 3)))
(add (make-scheme-number 3) (make-rational 4 5))
(add (make-rational 3 1) (make-rational 4 5))

(mul (make-rational 3 4) (make-real .8))
(div (make-real 10) (make-rational 5 2))
(sub (make-scheme-number 2) (make-real 4.0))
(define complex (make-complex-from-real-imag (make-real 10) (make-scheme-number 20)))
(div complex (make-real 10))
(div complex (make-complex-from-real-imag (make-real 10) (make-rational 0 1)))
(div complex (make-rational 20 2))

(project complex)
(project (make-real 4.0))
(project (make-rational 4 2))
(project (make-scheme-number 3))

(drop (make-scheme-number 3))
(drop (make-rational 4 2))
(drop (make-real 4.0))
(drop complex)

(define poly-x (make-polynomial-sparse 'x (list (list 2 (make-rational 4 5))
                                          (list 1 (make-scheme-number 3))
                                          (list 0 (make-real 2.4)))))
(define poly-y (make-polynomial-sparse 'x (list (list 3 (make-real 4))
                                          (list 2 (make-rational 2 3))
                                          (list 1 (make-scheme-number 3)))))
poly-x
poly-y
(add poly-x poly-y)
(mul poly-y poly-x)
(mul poly-x poly-x)
(=zero? poly-x)
(=zero? (make-polynomial-sparse 'x '()))
(sub poly-x poly-y)
(sub poly-x poly-x)

(define poly-xd (make-polynomial-dense 'x (list (make-rational 4 5) (make-scheme-number 3) (make-real 2.4))))
(define poly-yd (make-polynomial-dense 'x (list (make-real 4) (make-rational 2 3) (make-scheme-number 3) (make-scheme-number 0))))

poly-xd
poly-yd
(negate poly-xd)
(add poly-xd poly-xd)
(sub poly-yd poly-xd)
(=zero? (sub poly-yd poly-yd))
(=zero? (add poly-yd poly-yd))
(mul poly-xd poly-yd)
(mul poly-xd poly-xd)
(add poly-xd poly-y)
(mul poly-y poly-xd)

(define poly-dividend (make-polynomial-sparse 'x (list (list 5 (make-scheme-number 1))
                                                       (list 0 (make-scheme-number -1)))))
(define poly-divider (make-polynomial-sparse 'x (list (list 2 (make-scheme-number 1))
                                                      (list 0 (make-scheme-number -1)))))
(div poly-dividend poly-divider)
